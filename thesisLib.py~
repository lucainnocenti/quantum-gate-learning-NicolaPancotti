from qutip import *
def Likelihood(J, rho_0, G, dCS, H) : #Likelihood function
    
    j = complex(0,1)
    Ak = G*rho_0
    #A = tensor(Ak*Ak.dag(), dCI)
    A = Ak*Ak.dag()
    
    rho = tensor(rho_0, dCS)
    H = HamiltonianAB(J)
    U = (-j*H).expm()
    Btemp = U*rho
    Bk = Btemp*Btemp.dag()
    B = Bk.ptrace([0,1,2])
    
    out = (A*B).tr()

    return abs(out)


def H(x,N) :
    k = 0
    H = 0
    sx = sigmax()
    sz = sigmaz()
    for q in [sx,sz]:    
        temp = 0
        OpChain = [qeye(2)]*N
        OpChain[0] = q
        OpChain[1] = q
        temp += x[k]*tensor(OpChain)
        k+=1        
        H += temp 
    for p in [2,3]:
        for q in [sx,sz]:
            temp = 0
            OpChain = [qeye(2)]*N
            OpChain[0] = q
            OpChain[p] = q
            temp += x[k]*tensor(OpChain)
            OpChain = [qeye(2)]*N
            OpChain[1] = q
            OpChain[p] = q
            temp += x[k]*tensor(OpChain)
            k += 1
            H += temp 
    for q in [sx,sz]:
        temp = 0
        OpChain = [qeye(2)]*N
        OpChain[2] = q
        OpChain[3] = q
        temp += x[k]*tensor(OpChain)
        k+=1        
        H += temp 
    for i in range(4) :
        temp = 0
        OpChain = [qeye(2)]*N
        OpChain[i] = sz
        temp += x[k]*tensor(OpChain)
        H += temp 
    k += 1
    temp = 0
    OpChain = [qeye(2)]*N
    OpChain[3] = sx
    temp += x[k]*tensor(OpChain)#last one

    H += temp 

    
    return H

def Hamiltonian(x) :
    
    k = 0
    H = 0
    i = 0
    
    for p in interactions :
        for q in [sx,sz] :
        
            temp = 0
            
            OpChain = [qeye(2)]*N
            OpChain[p[0]] = q.op
            OpChain[p[1]] = q.op
            
            temp += x[k]*tensor(OpChain)
            k += 1
    
            H += temp 
    
    for i in range(2) :
    
        temp = 0
        OpChain = [qeye(2)]*N
        OpChain[i] = sz.op
        temp += x[k]*tensor(OpChain)
        k += 1
    
        H += temp 

    temp = 0
    OpChain = [qeye(2)]*N
    OpChain[2] = sx.op
    temp += x[k]*tensor(OpChain)

    H += temp 

    
    return H

